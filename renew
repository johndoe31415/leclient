#!/usr/bin/python3
#	leclient - Let's encrypt frontend tooling and configuration
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of leclient.
#
#	leclient is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	leclient is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with leclient. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import subprocess
import os
import textwrap
from FriendlyArgumentParser import FriendlyArgumentParser
from Configuration import Configuration
from Tools import CertTools

parser = FriendlyArgumentParser(description = "Renew Let's Encrypt certificates.")
parser.add_argument("--insecure-mode", action = "store_true", help = "Proceed with certificate renewal even if some security safeguards fail (like exposed private keys).")
parser.add_argument("--only-renew", metavar = "name", type = str, help = "Only renew this single entity name. By default, all entities are checked.")
parser.add_argument("--force-renew", action = "store_true", help = "Trigger renewal regardless if it is needed or not.")
parser.add_argument("-n", "--dry-run", action = "store_true", help = "Perform all checks but do not actually try to renew certificates. Instead, just print to stdout if a certificate would have been renewed.")
parser.add_argument("-d", "--config-dir", metavar = "dirname", type = str, default = "~/.config/leclient", help = "Specifies configuration directory to use. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
args = parser.parse_args(sys.argv[1:])

class CertificateRenewer():
	def __init__(self, args):
		self._args = args

		self._config = Configuration(args.config_dir)
		if not self._config.configured:
			print("leclient has not yet been configured; run the 'configure' script first.", file = sys.stderr)
			sys.exit(1)

		self._sanity_check()

	def _sanity_check(self):
		any_key_readable = False
		for request in self._config.requests:
			try:
				with open(request["server_key"]) as f:
					key_readable = True
					any_key_readable = True
			except (FileNotFoundError, PermissionError):
				key_readable = False
			if key_readable:
				print("Key file readable by client -- this is a security issue: %s" % (request["server_key"]))
		if any_key_readable and (not self._args.insecure_mode):
			print()
			print("\n".join(textwrap.wrap("FATAL ERROR: Not proceeding with the renewal because there are exposed private keys. Please change their owner (and possibly permissions) and re-run leclient. Alternatively, you can force proceeding in insecure mode by using the '--insecure-mode' command line option, but this is not recommended.")))
			sys.exit(1)

	def _run_request(self, request):
		needs_renewal = True
		if not os.path.isfile(request["server_crt"]):
			if args.verbose >= 1:
				print("Renewing certificate %s because it does not exist yet." % (request["server_crt"]), file = sys.stderr)
		elif CertTools.crt_expires_in_less_than_days(request["server_crt"], self._config.renew_days_before_expiration):
			if args.verbose >= 1:
				print("Renewing certificate %s because it expires in less than %d days." % (request["server_crt"], self._config.renew_days_before_expiration), file = sys.stderr)
		elif CertTools.crt_get_hostnames(request["server_crt"]) != CertTools.csr_get_hostnames(request["server_csr"]):
			if args.verbose >= 1:
				print("Renewing certificate %s because the CSR has different SAN DNS names than the current certificate." % (request["server_crt"]), file = sys.stderr)
		elif self._args.force_renew:
			if args.verbose >= 1:
				print("Renewing certificate %s because it was forced by a command line option." % (request["server_crt"]), file = sys.stderr)
		else:
			if args.verbose >= 2:
				print("No current reason to renew certificate %s." % (request["server_crt"]), file = sys.stderr)
			needs_renewal = False

		if needs_renewal:
			if not self._args.dry_run:
				acme_tiny_bin = os.path.dirname(os.path.realpath(__file__)) + "/acme_tiny.py"
				cmd = [ acme_tiny_bin, "--account-key", self._config.account_key, "--csr", request["server_csr"], "--acme-dir", self._config.challenge_dir ]
				acme_output = subprocess.check_output(cmd)
				certificates = CertTools.split_certificates(acme_output)
				server_certificate = certificates[0]
				with open(request["server_crt"], "wb") as f:
					f.write(server_certificate)
				os.chmod(request["server_crt"], 0o644)
				with open(request["server_crt_chain"], "wb") as f:
					for certificate in certificates[1:]:
						f.write(certificate)
				os.chmod(request["server_crt_chain"], 0o644)
				with open(self._config.renew_trigger_file, "wb") as f:
					pass
			else:
				print("Would renew %s, but not performing the request because in dry-run mode." % (request["server_csr"]))

	def run(self):
		for request in self._config.requests:
			if (self._args.only_renew is None) or (self._args.only_renew == request["name"]):
				self._run_request(request)

crn = CertificateRenewer(args)
crn.run()
