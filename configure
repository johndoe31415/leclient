#!/usr/bin/python3
#	leclient - Let's encrypt frontend tooling and configuration
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of leclient.
#
#	leclient is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	leclient is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with leclient. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import subprocess
import collections
import contextlib
from FriendlyArgumentParser import FriendlyArgumentParser
from Configuration import Configuration
from Tools import UITools, CertTools
from TemplateGenerator import TemplateGenerator

parser = FriendlyArgumentParser(description = "Tool for setting up the Let's Encrypt configuration using leclient.")
parser.add_argument("-d", "--config-dir", metavar = "dirname", type = str, default = "~/.config/leclient", help = "Specifies configuration directory to use. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
args = parser.parse_args(sys.argv[1:])

def genkey(keytype, param, filename):
	keydir = os.path.dirname(os.path.realpath(filename))
	if not os.path.isdir(keydir):
		os.makedirs(keydir)
		os.chmod(keydir, 0o700)
	if keytype == "rsa":
		subprocess.check_call([ "openssl", "genrsa", "-out", filename, str(param) ], stderr = subprocess.DEVNULL)
	elif keytype == "ecc":
		subprocess.check_call([ "openssl", "ecparam", "-out", filename, "-name", str(param), "-genkey" ], stderr = subprocess.DEVNULL)
	else:
		raise NotImplementedError(keytype)

config = Configuration(args.config_dir)
if not config.configured:
	print("This is the first-time configuration of leclient.")
	print("Please answer the following questions to enable configuration:")

	hostname_dict = collections.OrderedDict()

	while True:
		hostnames = input("Hostnames for certificate #%d (separate by space, RETURN to finish): " % (len(hostname_dict) + 1))
		hostnames = hostnames.split()
		if len(hostnames) == 0:
			break

		while True:
			suggested_name = hostnames[0]
			name = input("Name for certificate #%d (RETURN defaults to %s): " % (len(hostname_dict) + 1, suggested_name))
			if name == "":
				name = suggested_name
			if name not in hostname_dict:
				break
			else:
				print("Name already taken, please choose a different one.")

		hostname_dict[name] = hostnames

	if len(hostname_dict) == 0:
		print("No hostnames specified, cannot continue.", file = sys.stderr)
		sys.exit(1)

	config.set_initial_config(hostname_dict)
	config.write()

if not os.path.exists(config.account_key):
	if UITools.confirm("Account key %s does not exist. Create now (y/n)? " % (config.account_key)):
		genkey("rsa", 4096, config.account_key)

for request in config.requests:
	if not os.path.exists(request["server_key"]):
		if len(request["hostnames"]) == 1:
			host_list = "host %s" % (request["hostnames"][0])
		else:
			host_list = "hosts %s" % (", ".join(request["hostnames"]))
		if UITools.confirm("Request key %s (%s) does not exist. Create now (y/n)? " % (request["server_key"], host_list)):
			(keytype, param) = UITools.choice([
				(("ecc", "secp384r1"), "ECDSA on P-384"),
				(("ecc", "secp256r1"), "ECDSA on P-256"),
				(("rsa", 4096), "RSA-4096"),
				(("rsa", 3072), "RSA-3072"),
				(("rsa", 2048), "RSA-2048"),
			], "Select cryptosystem: ")
			genkey(keytype, param, request["server_key"])

for request in config.requests:
	csr_exists = os.path.exists(request["server_csr"])
	hostnames_have_changed = csr_exists and (CertTools.csr_get_hostnames(request["server_csr"]) != set(request["hostnames"]))
	if hostnames_have_changed:
		print("Hostnames have changed for '%s', recreating CSR." % (request["name"]))
	if (not csr_exists) or hostnames_have_changed:
		if args.verbose >= 1:
			print("Creating CSR %s..." % (request["server_csr"]), file = sys.stderr)
		CertTools.create_csr(request["hostnames"], request["server_csr"], request["server_key"])

template_generator = TemplateGenerator(config)
template = template_generator.render_http()
with open(config.apache2_config_template_dir + "/0010-leclient-http.conf", "w") as f:
	f.write(template)

for (conf_no, request) in enumerate(config.requests, 100):
	filename = config.apache2_config_template_dir + "/%04d-leclient-https-%s.conf" % (conf_no, request["name"])
	with open(filename, "w") as f:
		f.write(template_generator.render_https(request))

systemd_service_file = os.path.expanduser("~/.local/share/systemd/user/leclient.service")
systemd_timer_file = os.path.expanduser("~/.local/share/systemd/user/leclient.timer")
if (not os.path.isfile(systemd_service_file)) or (not os.path.isfile(systemd_timer_file)):
	if UITools.confirm("systemd unit not configured. Create now (y/n)? "):
		with contextlib.suppress(FileExistsError):
			os.makedirs(os.path.dirname(systemd_service_file))
		executable = os.path.realpath(os.path.dirname(__file__)) + "/renew"
		with open(systemd_service_file, "w") as f:
			f.write(template_generator.render_systemd_service(executable))
		with open(systemd_timer_file, "w") as f:
			f.write(template_generator.render_systemd_timer())
		subprocess.check_call([ "systemctl", "--user", "daemon-reload" ])
		subprocess.check_call([ "systemctl", "--user", "enable", "leclient.timer" ])
		subprocess.check_call([ "systemctl", "--user", "start", "leclient.timer" ])

if args.verbose >= 2:
	print("Configuration finished: %s" % (config.base_dir))
