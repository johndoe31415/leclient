#!/usr/bin/python3
#	leclient - Let's encrypt frontend tooling and configuration
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of leclient.
#
#	leclient is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	leclient is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with leclient. If not, see <http://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser
from Configuration import Configuration
from Tools import UITools, CertTools
from ApacheTemplate import ApacheTemplate

parser = FriendlyArgumentParser(description = "Initial setup of a Let's Encrypt client.")
parser.add_argument("-d", "--config-dir", metavar = "dirname", type = str, default = "~/.config/leclient", help = "Specifies configuration directory to use. Defaults to %(default)s.")
parser.add_argument("-k", "--key-file", metavar = "filename", type = str, help = "Specifies the PEM encoded filename that contains the server key. By default is placed in the keys/ subdirectory of the config directory.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
args = parser.parse_args(sys.argv[1:])

def genkey(keytype, param, filename):
	keydir = os.path.dirname(os.path.realpath(filename))
	if not os.path.isdir(keydir):
		os.makedirs(keydir)
		os.chmod(keydir, 0o700)
	if keytype == "rsa":
		subprocess.check_call([ "openssl", "genrsa", "-out", filename, str(param) ], stderr = subprocess.DEVNULL)
	elif keytype == "ecc":
		subprocess.check_call([ "openssl", "ecparam", "-out", filename, "-name", str(param), "-genkey" ], stderr = subprocess.DEVNULL)
	else:
		raise NotImplementedError(keytype)

config = Configuration(args.config_dir)
if not config.configured:
	print("This is the first-time configuration of leclient.")
	print("Please answer the following questions to enable configuration:")
	hostnames = input("Hostnames (separate by space): ")
	hostnames = hostnames.split()
	config.set_initial_config(hostnames, key_file = args.key_file)
	config.write()

if not os.path.exists(config.account_key):
	if UITools.confirm("Account key %s does not exist. Create now (y/n)? " % (config.account_key)):
		genkey("rsa", 4096, config.account_key)

if not os.path.exists(config.server_key):
	if UITools.confirm("Request key %s does not exist. Create now (y/n)? " % (config.server_key)):
		(keytype, param) = UITools.choice([
			(("ecc", "secp384r1"), "ECDSA on P-384"),
			(("ecc", "secp256r1"), "ECDSA on P-256"),
			(("rsa", 2048), "RSA-2048"),
			(("rsa", 3072), "RSA-3072"),
			(("rsa", 4096), "RSA-4096"),
		], "Select cryptosystem: ")
		genkey(keytype, param, config.server_key)

if (not os.path.exists(config.server_csr)) or (CertTools.csr_get_hostnames(config.server_csr) != set(config.hostnames)):
	if args.verbose >= 1:
		print("Creating CSR...", file = sys.stderr)
	CertTools.create_csr(config.hostnames, config.server_csr, config.server_key)

apache_template = ApacheTemplate(config)
template = apache_template.render_http()
with open(config.apache2_template_dir + "/001-leclient-http.conf", "w") as f:
	f.write(template)
for (conf_no, hostname) in enumerate(config.hostnames, 100):
	filename = config.apache2_template_dir + "/%03d-%s.conf" % (conf_no, hostname)
	with open(filename, "w") as f:
		f.write(apache_template.render_https(hostname))

if args.verbose >= 2:
	print("Configuration finished: %s" % (config.base_dir))
